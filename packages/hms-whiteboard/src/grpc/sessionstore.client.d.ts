// @generated by protobuf-ts 2.9.4 with parameter output_javascript_es2015
// @generated from protobuf file "sessionstore.proto" (package "sessionstorepb", syntax proto3)
// tslint:disable
import type { DeleteResponse } from "./sessionstore";
import type { DeleteRequest } from "./sessionstore";
import type { SetResponse } from "./sessionstore";
import type { SetRequest } from "./sessionstore";
import type { GetResponse } from "./sessionstore";
import type { GetRequest } from "./sessionstore";
import type { ChangeStream } from "./sessionstore";
import type { OpenRequest } from "./sessionstore";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { Event } from "./sessionstore";
import type { SubscribeRequest } from "./sessionstore";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { HelloResponse } from "./sessionstore";
import type { HelloRequest } from "./sessionstore";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sessionstorepb.Api
 */
export interface IApiClient {
    /**
     * @generated from protobuf rpc: Hello(sessionstorepb.HelloRequest) returns (sessionstorepb.HelloResponse);
     */
    hello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloResponse>;
    /**
     * @generated from protobuf rpc: Subscribe(sessionstorepb.SubscribeRequest) returns (stream sessionstorepb.Event);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, Event>;
}
/**
 * @generated from protobuf service sessionstorepb.Api
 */
export declare class ApiClient implements IApiClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * @generated from protobuf rpc: Hello(sessionstorepb.HelloRequest) returns (sessionstorepb.HelloResponse);
     */
    hello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloResponse>;
    /**
     * @generated from protobuf rpc: Subscribe(sessionstorepb.SubscribeRequest) returns (stream sessionstorepb.Event);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, Event>;
}
/**
 * @generated from protobuf service sessionstorepb.Store
 */
export interface IStoreClient {
    /**
     * open - start listening to updates in keys with provided match patterns
     * provide change_id as last received ID to resume updates
     *
     * @generated from protobuf rpc: open(sessionstorepb.OpenRequest) returns (stream sessionstorepb.ChangeStream);
     */
    open(input: OpenRequest, options?: RpcOptions): ServerStreamingCall<OpenRequest, ChangeStream>;
    /**
     * get last stored value in given key
     *
     * @generated from protobuf rpc: get(sessionstorepb.GetRequest) returns (sessionstorepb.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse>;
    /**
     * set key value
     *
     * @generated from protobuf rpc: set(sessionstorepb.SetRequest) returns (sessionstorepb.SetResponse);
     */
    set(input: SetRequest, options?: RpcOptions): UnaryCall<SetRequest, SetResponse>;
    /**
     * delete key from store
     *
     * @generated from protobuf rpc: delete(sessionstorepb.DeleteRequest) returns (sessionstorepb.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse>;
}
/**
 * @generated from protobuf service sessionstorepb.Store
 */
export declare class StoreClient implements IStoreClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * open - start listening to updates in keys with provided match patterns
     * provide change_id as last received ID to resume updates
     *
     * @generated from protobuf rpc: open(sessionstorepb.OpenRequest) returns (stream sessionstorepb.ChangeStream);
     */
    open(input: OpenRequest, options?: RpcOptions): ServerStreamingCall<OpenRequest, ChangeStream>;
    /**
     * get last stored value in given key
     *
     * @generated from protobuf rpc: get(sessionstorepb.GetRequest) returns (sessionstorepb.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse>;
    /**
     * set key value
     *
     * @generated from protobuf rpc: set(sessionstorepb.SetRequest) returns (sessionstorepb.SetResponse);
     */
    set(input: SetRequest, options?: RpcOptions): UnaryCall<SetRequest, SetResponse>;
    /**
     * delete key from store
     *
     * @generated from protobuf rpc: delete(sessionstorepb.DeleteRequest) returns (sessionstorepb.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse>;
}
