// @generated by protobuf-ts 2.9.4 with parameter output_javascript_es2015
// @generated from protobuf file "sessionstore.proto" (package "sessionstorepb", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter output_javascript_es2015
// @generated from protobuf file "sessionstore.proto" (package "sessionstorepb", syntax proto3)
// tslint:disable
import { Store } from "./sessionstore";
import { Api } from "./sessionstore";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sessionstorepb.Api
 */
export class ApiClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Api.typeName;
        this.methods = Api.methods;
        this.options = Api.options;
    }
    /**
     * @generated from protobuf rpc: Hello(sessionstorepb.HelloRequest) returns (sessionstorepb.HelloResponse);
     */
    hello(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Subscribe(sessionstorepb.SubscribeRequest) returns (stream sessionstorepb.Event);
     */
    subscribe(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
}
// metadata token -> session id, room id, user id, username
// open is used for presence
// change stream will return all keys in order of oldest to newsest.
// max number of keys -> 5000
// max size per key -> 10240 Bytes
/**
 * @generated from protobuf service sessionstorepb.Store
 */
export class StoreClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Store.typeName;
        this.methods = Store.methods;
        this.options = Store.options;
    }
    /**
     * open - start listening to updates in keys with provided match patterns
     * provide change_id as last received ID to resume updates
     *
     * @generated from protobuf rpc: open(sessionstorepb.OpenRequest) returns (stream sessionstorepb.ChangeStream);
     */
    open(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * get last stored value in given key
     *
     * @generated from protobuf rpc: get(sessionstorepb.GetRequest) returns (sessionstorepb.GetResponse);
     */
    get(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * set key value
     *
     * @generated from protobuf rpc: set(sessionstorepb.SetRequest) returns (sessionstorepb.SetResponse);
     */
    set(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * delete key from store
     *
     * @generated from protobuf rpc: delete(sessionstorepb.DeleteRequest) returns (sessionstorepb.DeleteResponse);
     */
    delete(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
